{"version":3,"sources":["Tile.js","Row.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["colours","black","red","yellow","blue","grey","white","Tile","react_default","a","createElement","className","this","props","playing","style","width","onClick","functions","change","data-row","row","data-col","col","background","index","value","Object","keys","Component","Row","cols","percent","position","_this","_this$props","data","subtract","lineHeight","height","map","v","k","Tile_Tile","key","length","toString","tileIsPlaying","add","Board","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","addTile","subtractTile","addRow","subtractRow","e","_e$target$dataset","target","dataset","oldValue","setState","parentNode","push","pop","_this2","Row_Row","randomBoard","board","Math","ceil","random","i","t","floor","App","timer","setInterval","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.987b2522.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Tile.scss';\n\nconst colours = {\n  \"black\": \"#212121\",\n  \"red\": \"#F70F0F\",\n  \"yellow\": \"#FCD318\",\n  // \"blue\": \"#0F7FBF\",\n  // \"blue\": \"#17105D\",\n  \"blue\": \"#344D90\",\n  \"grey\": \"#A3A3A3\",\n  \"white\": \"#FFFFFF\"\n}\n\nconst colour = (index) => colours[Object.keys(colours)[index]]\n\nexport default class Tile extends Component {\n  render(){\n    return (\n      <div className={this.props.playing ? \"Tile playing\" : \"Tile\"}\n        style={{\n          width: this.props.width\n        }}\n      >\n        <div \n          className=\"TileInner\" \n          onClick={this.props.functions.change}\n          data-row={this.props.row}\n          data-col={this.props.col}\n          style={{\n            background: colour(this.props.value)\n          }}>\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport Tile from './Tile';\nimport './Row.scss';\n\nexport default class Row extends Component {\n  tileIsPlaying(col, cols){\n    const {position} = this.props\n    const percent = position / 100\n    return percent >= col / cols && percent <= (col + 1) / cols\n  }\n  render(){\n    let {data, row, functions} = this.props\n    return (\n      <div className=\"RowOuter\" data-row={row} >\n        <div className=\"rowButton subtract\" \n          onClick={ functions.subtract }\n          style={{ lineHeight: this.props.height }} >\n          –\n        </div>\n        <div className=\"Row\" style={{ height: this.props.height }}>\n          { data.map((v, k) => \n            <Tile value={v} key={k} row={row} col={k} \n              functions={functions} \n              width={ (100 / data.length).toString() + \"%\" }\n              playing={ this.tileIsPlaying(k, data.length) }\n            >\n            </Tile> ) \n          }\n        </div>\n        <div className=\"rowButton add\" onClick={ functions.add }\n          style={{ lineHeight: this.props.height }} >\n          +\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport Row from './Row';\nimport './Board.css';\n\nexport default class Board extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      data: props.data,\n      functions: {\n        'change': this.change.bind(this),\n        'add': this.addTile.bind(this),\n        'subtract': this.subtractTile.bind(this)\n      }\n    }\n    this.addRow = this.addRow.bind(this)\n    this.subtractRow = this.subtractRow.bind(this)\n  }\n  change(e){\n    const {row, col} = e.target.dataset\n    let data = this.state.data\n    let oldValue = data[row][col]\n    data[row][col] = (oldValue + 1) % 6\n    this.setState({data: data})\n  }\n  addTile(e){\n    let data = this.state.data\n    const row = e.target.parentNode.dataset.row\n    if (data[row].length < 9){\n      data[row].push(0)\n      this.setState({data: data})\n    }\n  }\n  subtractTile(e){\n    let data = this.state.data\n    const row = e.target.parentNode.dataset.row\n    if (data[row].length > 1){\n      data[row].pop()\n      this.setState({data: data})\n    }\n  }\n  addRow(){\n    let data = this.state.data\n    if (data.length < 8){\n      data.push([0,0,0,0])\n      this.setState({data: data})\n    }\n  }\n  subtractRow(){\n    let data = this.state.data\n    if (data.length > 1){\n      data.pop()\n      this.setState({data: data})\n    }\n  }\n  render(){\n    let data = this.state.data\n    return (\n      <div className=\"Board\">\n        <div className=\"rowButton long subtract\" onClick={this.subtractRow}>–</div>\n        { data.map((v, k) => \n          <Row data={v} key={k} row={k} \n            functions={this.state.functions} \n            position={this.props.position} \n            height={ (800 / data.length).toString() + \"px\" }>\n          </Row> ) }\n        <div className=\"rowButton long add\" onClick={this.addRow}>+</div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './Board';\n\nfunction randomBoard(){\n  let board = []\n  const height = Math.ceil(Math.random() * 8)\n  for(var i = 0; i < height; i++){\n    var row = []\n    let width = Math.ceil(Math.random() * 8)\n    for(var t = 0; t < width; t++){\n      row.push(Math.floor(Math.random() * 6))\n    }\n    board.push(row)\n  }\n  return board\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      data: randomBoard(),\n      position: 1\n    }\n  }\n  componentDidMount(){\n    this.timer = setInterval(() => {\n      let position = this.state.position\n      if (position === 100) {\n        position = 1\n      } else {\n        position++\n      }\n      this.setState({position: position})\n    }, 20) \n  }\n  render() {\n    let data = this.state.data\n    return (\n      <div className=\"App\">\n        <Board data={data} position={this.state.position}>\n        </Board>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}